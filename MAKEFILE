# Compiler and Flags
CC = gcc
CFLAGS = -Wall -Wextra -pedantic -std=c99
LDFLAGS = -lssl -lcrypto -lcurl
INCLUDES = -Iinclude

# Targets
TARGETS = pmll arc_agi_benchmark pmll_np_solver sat_test api_llama api vector_Matrix

# Deployment and Service Management
INSTALL_DIR = /opt/pmll
DEPLOY_BINARIES = silo_manager api logic_loop
ORCHESTRATION_SCRIPT = ./Orchestrate.sh

# Default target: Build all
.PHONY: all clean debug deploy start_services stop_services restart_services Orchestrate run
all: $(TARGETS)

# Define each binary and its dependencies
pmll: unified_voice.o pml_logic_loop.o memory_silo.o io_socket.o persistence.o cross_talk.o main.o vector_Matrix.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

arc_agi_benchmark: arc_agi_benchmark.o vector_Matrix.o io_socket.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

pmll_np_solver: pmll_np_solver.o vector_Matrix.o io_socket.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

sat_test: SAT_Compare.o Pmll_NP_Solver.o MiniSAT.o generate_3sat_instance.o SAT_Solver.o vector_Matrix.o io_socket.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

api_llama: API_Llama.o vector_Matrix.o io_socket.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

api: API.o vector_Matrix.o io_socket.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

vector_Matrix: vector_Matrix.o io_socket.o
	$(CC) $(CFLAGS) $(LDFLAGS) $(INCLUDES) -o $@ $^

# Compile Rules
%.o: %.c
	$(CC) $(CFLAGS) $(INCLUDES) -c $<

# Deployment Target
deploy: $(TARGETS)
	@echo "Deploying binaries to $(INSTALL_DIR)..."
	@sudo mkdir -p $(INSTALL_DIR)
	@for binary in $(DEPLOY_BINARIES); do \
		if [ -f $$binary ]; then \
			sudo cp $$binary $(INSTALL_DIR)/; \
			echo "Deployed $$binary to $(INSTALL_DIR)"; \
		else \
			echo "Binary $$binary not found. Skipping..."; \
		fi \
	done
	@echo "Deployment complete."

# Start Services
start_services:
	@echo "Starting services..."
	@$(INSTALL_DIR)/silo_manager & echo $$! > silo_manager.pid
	@$(INSTALL_DIR)/api & echo $$! > api.pid
	@$(INSTALL_DIR)/logic_loop & echo $$! > logic_loop.pid
	@echo "Services started successfully."

# Stop Services
stop_services:
	@echo "Stopping services..."
	@for pidfile in silo_manager.pid api.pid logic_loop.pid; do \
		if [ -f $$pidfile ]; then \
			kill `cat $$pidfile` && rm -f $$pidfile; \
			echo "Stopped service with PID `cat $$pidfile`"; \
		else \
			echo "PID file $$pidfile not found. Skipping..."; \
		fi \
	done
	@echo "Services stopped."

# Restart Services
restart_services: stop_services start_services
	@echo "Services restarted."

# Run Orchestration Script
Orchestrate:
	@if [ -f $(ORCHESTRATION_SCRIPT) ]; then \
		echo "Running orchestration script..."; \
		chmod +x $(ORCHESTRATION_SCRIPT); \
		$(ORCHESTRATION_SCRIPT); \
	else \
		echo "Error: Orchestration script $(ORCHESTRATION_SCRIPT) not found."; \
		exit 1; \
	fi

# Run Default Program (pmll)
run: pmll
	@echo "Running the default program: pmll..."
	./pmll

# Clean Target
clean:
	@echo "Cleaning up..."
	-rm -f *.o $(TARGETS) *.pid
	@echo "Clean complete."

# Debug Build
debug: CFLAGS += -g -O0
debug: $(TARGETS)



